{"version":3,"sources":["Components/Dialogs/dialogs.module.css","Components/Dialogs/DialogItem/dialogItem.module.css","Components/Dialogs/DialogItem/Message/message.module.css","Components/Dialogs/DialogItem/dialogItem.tsx","Components/Dialogs/DialogItem/Message/message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/dialogs.tsx","Components/Dialogs/dialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","dialogItem","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElement","dialogs","map","d","messagesElement","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","compose","withAuthRedirect","connect","dispatch","sendMessageAC"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,4B,oBCAvLD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,OAAS,2BAA2B,OAAS,2BAA2B,SAAW,+B,oBCA3ID,EAAOC,QAAU,CAAC,QAAU,2B,iHCmBbC,EAXI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,Q,kBCFvBC,EANC,SAACT,GACb,OACI,yBAAKG,UAAWC,IAAEM,YAAaV,EAAMW,U,wCCJvCC,EAAcC,YAAiB,IAetBC,cAAU,CAACC,KAAM,wBAAjBD,EAbQ,SAACd,GACpB,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBJ,KAAM,iBACNe,YAAa,wBAExB,6BAAK,6CCuBFC,EA9BC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAiBF,EAAMG,QAAQC,KAC/B,SAACC,GAAD,OAAY,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMN,GAAI4B,EAAE5B,QAC5C6B,EAAkBN,EAAMO,SAASH,KACjC,SAACI,GAAD,OAAY,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,aACfc,EAAMS,eAM3B,OAAKlC,EAAMmC,OAGP,yBAAKhC,UAAWC,IAAEwB,SACd,yBAAKzB,UAAWC,IAAEgC,cACbT,GAEL,yBAAKxB,UAAWC,IAAE4B,UACd,6BAAMD,IAGV,kBAAC,EAAD,CAAgBf,SAfJ,SAACqB,GACjBrC,EAAMsC,YAAYD,EAAOH,oBAGH,kBAAC,IAAD,CAAU3B,GAAI,Y,uBCE7BgC,sBACXC,IACAC,aAjBkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACgB,GACtB,MAAO,CACHJ,YAAa,SAACJ,GACVQ,EAASC,YAAcT,SAMpBK,CAGbf","file":"static/js/4.544fd6ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3GW9J\",\"dialogsItems\":\"dialogs_dialogsItems__3COTy\",\"active\":\"dialogs_active__1CNOb\",\"dialogItem\":\"dialogs_dialogItem__15yip\",\"messages\":\"dialogs_messages__1cNZ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogItem_dialogs__61QXa\",\"active\":\"dialogItem_active__3C-MD\",\"dialog\":\"dialogItem_dialog__3bXEd\",\"messages\":\"dialogItem_messages__qgltT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__3BpLt\"};","import React from \"react\";\r\nimport s from \"./dialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: any) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./message.module.css\";\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.dialogItem}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder={\"Enter your message\"}/>\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm);\r\n","import React from \"react\";\r\nimport s from \"./dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/dialogItem\";\r\nimport Message from \"./DialogItem/Message/message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\n\r\nconst Dialogs = (props: any) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElement = state.dialogs.map(\r\n        (d: any) => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElement = state.messages.map(\r\n        (m: any) => <Message message={m.message}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {sendMessageAC} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        sendMessage: (newMessageBody: any) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);\r\n\r\n"],"sourceRoot":""}