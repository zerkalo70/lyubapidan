{"version":3,"sources":["Components/Navigation/nav.module.css","Components/Profile/ProfileInfo/profileInfo.module.css","Components/Dialogs/dialogs.module.css","Components/Profile/MyPosts/myPosts.module.css","Components/Dialogs/DialogItem/dialogItem.module.css","Components/Header/Images/LogoF1.png","Components/Header/header.module.css","Components/Profile/MyPosts/Post/post.module.css","Components/Profile/MyPosts/Post/Women1.jpg","Components/Profile/Images/LogoF2.jpg","Components/Dialogs/DialogItem/Message/message.module.css","Components/Header/header.tsx","Components/Footer/footer.tsx","Components/Navigation/nav.tsx","Components/Profile/MyPosts/Post/post.tsx","Components/Profile/MyPosts/myPosts.tsx","Components/Profile/ProfileInfo/profileInfo.tsx","Components/Profile/profile.tsx","Components/Dialogs/DialogItem/dialogItem.tsx","Components/Dialogs/DialogItem/Message/message.tsx","Components/Dialogs/dialogs.tsx","App.tsx","serviceWorker.ts","redux/state.ts","index.tsx"],"names":["module","exports","Header","className","s","headerImg","src","LogoF1","alt","Footer","footer","Nav","nav","item","to","activeClassName","active","Post","props","post","Women1","message","likesCount","MyPosts","postElement","posts","map","p","newPostElement","React","createRef","postsBlock","ref","onClick","text","current","value","alert","ProfileInfo","profileInfo","main","LogoF2","descriptionBlock","Profile","profile","DialogItem","path","id","dialog","name","Message","dialogItem","Dialogs","dialogsElement","dialogs","d","messagesElement","messages","m","dialogsItems","App","render","state","profilePage","dialogsPage","Boolean","window","location","hostname","match","sidebar","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.726be99e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__Et1Bj\",\"item\":\"nav_item__3xsM5\",\"active\":\"nav_active__3a-2j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"profileInfo_profileInfo__3r8on\",\"descriptionBlock\":\"profileInfo_descriptionBlock__24mrV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3GW9J\",\"dialogsItems\":\"dialogs_dialogsItems__3COTy\",\"active\":\"dialogs_active__1CNOb\",\"dialogItem\":\"dialogs_dialogItem__15yip\",\"messages\":\"dialogs_messages__1cNZ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__12CUv\",\"posts\":\"myPosts_posts__3wr60\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogItem_dialogs__61QXa\",\"active\":\"dialogItem_active__3C-MD\",\"dialog\":\"dialogItem_dialog__3bXEd\",\"messages\":\"dialogItem_messages__qgltT\"};","module.exports = __webpack_public_path__ + \"static/media/LogoF1.48d09aeb.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerImg\":\"header_headerImg__1fXoA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__3BeDl\"};","module.exports = __webpack_public_path__ + \"static/media/Women1.c5901a19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LogoF2.2952645f.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__3BpLt\"};","import LogoF1 from \"./Images/LogoF1.png\";\r\nimport React from \"react\";\r\nimport s from \"./header.module.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <div>\r\n                <img className={s.headerImg} src={LogoF1} alt=\"iso\"/>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport s from \"./footer.module.css\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p className={s.footer}>© Петров С.В.</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport s from \"./nav.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n            <div className={s.nav}>\r\n                <ul className={s.item}>\r\n                    <li>\r\n                        <NavLink to = {\"/profile\"} activeClassName={s.active}>Профиль</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to = {\"/dialogs\"} activeClassName={s.active}>Сообщения</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <a>Новости</a>\r\n                    </li>\r\n                    <li>\r\n                        <a>Музыка</a>\r\n                    </li>\r\n                    <li>\r\n                        <a>Настройки</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from \"react\";\r\nimport s from \"./post.module.css\";\r\nimport Women1 from \"./Women1.jpg\";\r\n\r\nexport type PostType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <img src={Women1} alt=\"iso\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Likes:{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./myPosts.module.css\";\r\nimport Post, {PostType} from \"./Post/post\";\r\n\r\n\r\nexport type MyPosts = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nconst MyPosts = (props: MyPosts) => {\r\n\r\n    let postElement = props.posts.map(\r\n        (p: any) => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        let text = newPostElement.current?.value;\r\n        alert(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea ref={newPostElement}>a</textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add Post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport s from \"./profileInfo.module.css\";\r\nimport LogoF2 from \"../Images/LogoF2.jpg\";\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img className={s.main} src={LogoF2} alt=\"iso\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./profile.module.css\";\r\nimport MyPosts from \"./MyPosts/myPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/profileInfo\";\r\nimport {PostType} from \"./MyPosts/Post/post\";\r\n\r\nexport type Profile = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nconst Profile = (props: Profile) => {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo/>\r\n            <MyPosts posts={props.posts}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport s from \"./dialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./message.module.css\";\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={s.dialogItem}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./dialogs.module.css\";\r\nimport DialogItem, {DialogItemType} from \"./DialogItem/dialogItem\";\r\nimport Message, {MessageType} from \"./DialogItem/Message/message\";\r\n\r\n\r\nexport type Dialogs = {\r\n    dialogs: Array<DialogItemType>\r\n    messages: Array<MessageType>\r\n\r\n}\r\n\r\nconst Dialogs = (props: Dialogs) => {\r\n\r\n    let dialogsElement = props.dialogs.map(\r\n        (d: any) => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElement = props.messages.map(\r\n        (m: any) => <Message message={m.message}/>);\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./Components/Header/header\";\r\nimport Footer from \"./Components/Footer/footer\";\r\nimport Nav from \"./Components/Navigation/nav\";\r\nimport Profile from \"./Components/Profile/profile\";\r\nimport Dialogs from \"./Components/Dialogs/dialogs\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {PostType} from \"./Components/Profile/MyPosts/Post/post\";\r\nimport {DialogItemType} from \"./Components/Dialogs/DialogItem/dialogItem\";\r\nimport {MessageType} from \"./Components/Dialogs/DialogItem/Message/message\";\r\nimport {RootStateType} from \"./redux/state\";\r\n\r\n\r\ntype AppPropsType = {\r\n    // posts: Array<PostType>\r\n    // dialogs: Array<DialogItemType>\r\n    // messages: Array<MessageType>\r\n    state: RootStateType\r\n}\r\n\r\nconst App = (props: AppPropsType) => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"lyubaProject\">\r\n                <Header/>\r\n                <Nav/>\r\n                <div className=\"lyubaProjectContent\">\r\n                    <Route path={'/profile'} render = {\r\n                        () => <Profile posts={props.state.profilePage.posts}/> }/>\r\n                    <Route path={'/dialogs'} render = {\r\n                        () => <Dialogs dialogs={\r\n                            props.state.dialogsPage.dialogs}\r\n                                       messages={props.state.dialogsPage.messages}/> }/>\r\n                </div>\r\n                <Footer/>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype ProfilePageType = {\r\n    posts: Array<PostType>\r\n}\r\ntype DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\ntype SidebarType = {}\r\n\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogPageType\r\n    sidebar: SidebarType\r\n}\r\n\r\nlet state: RootStateType = {\r\n    profilePage: {\r\nposts: [\r\n    {id: 1, message: 'Привет', likesCount: 12},\r\n    {id: 2, message: 'Это мой первый пост!', likesCount: 21}\r\n]\r\n    },\r\n   dialogsPage: {\r\ndialogs: [\r\n    {id: 1, name: 'Люба'},\r\n    {id: 2, name: 'Маша'},\r\n    {id: 3, name: 'Даша'}\r\n],\r\n\r\nmessages: [\r\n    {id: 1, message: 'Я Вас приветствую!'},\r\n    {id: 2, message: 'Привет!'},\r\n    {id: 3, message: 'Здорово!'}\r\n]\r\n   },\r\n    sidebar: {}\r\n}\r\n\r\nexport default state;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport state from './redux/state';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App state={state}/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}