{"version":3,"sources":["Components/Navigation/nav.module.css","Components/Dialogs/dialogs.module.css","Components/Users/users.module.css","Components/Profile/ProfileInfo/profileInfo.module.css","Components/Dialogs/DialogItem/dialogItem.module.css","Components/Profile/MyPosts/myPosts.module.css","Components/Header/header.module.css","Components/Dialogs/DialogItem/Message/message.module.css","assets/Images/Women3.jpg","assets/Images/loading5.gif","Components/common/Preloader/preloader.module.css","assets/Images/LogoF2.jpg","Components/Profile/MyPosts/Post/post.module.css","Components/Profile/MyPosts/Post/Women1.jpg","Components/Header/Images/LogoF1.png","serviceWorker.ts","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","api/api.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/reduxStore.ts","Components/Footer/footer.tsx","Components/Navigation/nav.tsx","Components/Dialogs/DialogItem/dialogItem.tsx","Components/Dialogs/DialogItem/Message/message.tsx","Components/Dialogs/dialogs.tsx","Components/Dialogs/dialogsContainer.tsx","Components/Users/users.tsx","Components/common/Preloader/preloader.tsx","Components/Users/usersContainer.tsx","Components/Profile/ProfileInfo/profileInfo.tsx","Components/Profile/MyPosts/Post/post.tsx","Components/Profile/MyPosts/myPosts.tsx","Components/Profile/MyPosts/myPostsContainer.tsx","Components/Profile/profile.tsx","Components/Profile/profileContainer.tsx","Components/Header/header.tsx","Components/Header/headerContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","posts","id","message","likesCount","newPostText","profile","profileReducer","state","action","type","newPost","newText","dialogs","name","messages","newMessageBody","dialogsReducer","body","sidebarReducer","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","count","toggleFollowingProgress","usersReducer","map","u","followed","filter","email","login","isAuth","authReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","store","createStore","applyMiddleware","thunkMiddleware","Footer","className","s","footer","Nav","nav","item","to","activeClassName","active","DialogItem","props","path","dialog","Message","dialogItem","Dialogs","dialogsElement","d","messagesElement","m","dialogsItems","value","onChange","e","target","updateNewMessageBody","placeholder","onClick","sendMessage","DialogsContainer","connect","dispatch","updateNewMessageBodyAC","Users","pagesCount","Math","ceil","pages","i","push","p","styles","selectedPage","Page","onPageChanged","key","src","photos","small","Women3","alt","userPhoto","disabled","some","unfollow","follow","status","Preloader","preloader","loading5","UsersContainer","pageNumber","getUsers","this","React","Component","resultCode","followSuccess","unfollowSuccess","setCurrentPage","setUsers","items","totalCount","ProfileInfo","profileInfo","main","LogoF2","descriptionBlock","large","Post","Women1","MyPosts","postElement","newPostElement","createRef","postsBlock","current","updateNewPostText","ref","addPost","MyPostsContainer","changeNewTextAC","postMessage","Profile","ProfileContainer","params","setUserProfile","WithUrlDataContainerComponent","withRouter","Header","headerImg","LogoF1","loginBlock","HeaderContainer","setAuthUserData","App","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a75bac3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__Et1Bj\",\"item\":\"nav_item__3xsM5\",\"active\":\"nav_active__3a-2j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3GW9J\",\"dialogsItems\":\"dialogs_dialogsItems__3COTy\",\"active\":\"dialogs_active__1CNOb\",\"dialogItem\":\"dialogs_dialogItem__15yip\",\"messages\":\"dialogs_messages__1cNZ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1tEe4\",\"selectedPage\":\"users_selectedPage__1sfIb\",\"Page\":\"users_Page__28LOs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"profileInfo_profileInfo__3r8on\",\"descriptionBlock\":\"profileInfo_descriptionBlock__24mrV\",\"NoPhoto\":\"profileInfo_NoPhoto__10q2t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogItem_dialogs__61QXa\",\"active\":\"dialogItem_active__3C-MD\",\"dialog\":\"dialogItem_dialog__3bXEd\",\"messages\":\"dialogItem_messages__qgltT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__12CUv\",\"posts\":\"myPosts_posts__3wr60\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerImg\":\"header_headerImg__1fXoA\",\"loginBlock\":\"header_loginBlock__uq75i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__3BpLt\"};","module.exports = __webpack_public_path__ + \"static/media/Women3.2574b695.jpg\";","module.exports = __webpack_public_path__ + \"static/media/loading5.1fd5be2e.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__2CynD\"};","module.exports = __webpack_public_path__ + \"static/media/LogoF2.2952645f.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__3BeDl\"};","module.exports = __webpack_public_path__ + \"static/media/Women1.c5901a19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LogoF1.48d09aeb.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type ProfileActionsTypes = ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof changeNewTextAC>\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\n\r\nlet initialState: any = {\r\n    posts: [\r\n        {id: 1, message: 'Привет', likesCount: 12},\r\n        {id: 2, message: 'Это мой первый пост!', likesCount: 21}\r\n    ],\r\n    newPostText: \"NewPostText\",\r\n    profile: null\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: any = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                likesCount: 10\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            };\r\n\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostAC: any = () => ({type: \"ADD-POST\", postMessage: postMessage}) as const\r\nexport const setUserProfile: any = (profile: any) => ({type: \"SET_USER_PROFILE\", profile}) as const\r\nexport const changeNewTextAC = (newText: string) => ({type: \"UPDATE-NEW-POST-TEXT\", newText: newText}) as const\r\n\r\nexport default profileReducer;","\r\n\r\nexport type DialogsActionsTypes = ReturnType<typeof sendMessageAC>\r\n    | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\nlet initialState: any= {\r\n    dialogs: [\r\n        {id: 1, name: 'Люба'},\r\n        {id: 2, name: 'Маша'},\r\n        {id: 3, name: 'Даша'}\r\n    ],\r\n\r\n    messages: [\r\n        {id: 1, message: 'Я Вас приветствую!'},\r\n        {id: 2, message: 'Привет!'},\r\n        {id: 3, message: 'Здорово!'}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsTypes) => {\r\n\r\nswitch (action.type) {\r\n    case UPDATE_NEW_MESSAGE_BODY:\r\n        return {\r\n            ...state,\r\n            newMessageBody: action.body\r\n        };\r\n\r\n    case SEND_MESSAGE:\r\n        let body = state.newMessageBody;\r\n        return {\r\n            ...state,\r\n            newMessageBody: \"\",\r\n        messages: [...state.messages, {id: 6, message: body}]\r\n        };\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\nexport const sendMessageAC = () => {\r\n    return {\r\n        type: \"SEND-MESSAGE\"\r\n    } as const\r\n}\r\nexport const updateNewMessageBodyAC = (body: string) => {\r\n    return {\r\n        type: \"UPDATE-NEW-MESSAGE-BODY\",\r\n        body: body\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import  axios from \"axios\";\r\n\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"bf102d8c-cfd2-4d9c-a6c8-a4c689dcc873\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: any, pageSize: any) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response: any) => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(userId: any) {\r\n        return instance.post(`https://social-network.samuraijs.com/api/1.0/follow/${userId}`)\r\n    },\r\n\r\n    unfollow(userId: any) {\r\n        return instance.delete(`https://social-network.samuraijs.com/api/1.0/follow/${userId}`)\r\n    }\r\n}\r\n\r\n","\r\nimport {usersAPI} from \"../api/api\";\r\nimport axios from \"axios\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nlet initialState: any = {\r\n    users: [],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u: any) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u: any) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.count\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n            case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id: any) => id != action.userId)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess: any = (userId: any) => ({type: FOLLOW, userId});\r\nexport const unfollowSuccess: any = (userId: any) => ({type: UNFOLLOW, userId});\r\nexport const setUsers: any = (users: any) => ({type: SET_USERS, users});\r\nexport const setCurrentPage: any = (currentPage: any) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setTotalUsersCount: any = (totalUsersCount: any) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount});\r\nexport const toggleIsFetching: any = (isFetching: any) => ({type: TOGGLE_IS_FETCHING, count: isFetching});\r\nexport const toggleFollowingProgress: any = (isFetching: any, userId: any) =>\r\n    ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId});\r\n\r\nexport const getUsers = (currentPage: any, pageSize: any) => {\r\n    return (dispatch: any) => {\r\n    dispatch(toggleIsFetching(true));\r\n\r\n    usersAPI.getUsers(currentPage, pageSize)\r\n        .then((data: any) => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersCount(data.totalCount));\r\n        });\r\n    }\r\n}\r\nexport const follow = (userId: any) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.follow(userId)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId));\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            });\r\n    }\r\n}\r\nexport const unfollow = (userId: any) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.unfollow(userId)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId));\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","// export type ProfileActionsTypes = ReturnType<typeof addPostAC>\r\n//     | ReturnType<typeof changeNewTextAC>\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\n\r\nlet initialState: any = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData: any = (userId: any, email: any, login: any) =>\r\n    ({type: SET_USER_DATA, data: {userId, email, login}});\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n})\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from \"react\";\r\nimport s from \"./footer.module.css\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p className={s.footer}>© Петров С.В.</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport s from \"./nav.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n            <div className={s.nav}>\r\n                <ul className={s.item}>\r\n                    <li>\r\n                        <NavLink to = {\"/profile\"} activeClassName={s.active}>\r\n                            Профиль</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to = {\"/dialogs\"} activeClassName={s.active}>\r\n                            Сообщения</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to = {\"/users\"} activeClassName={s.active}>\r\n                            Пользователи</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <a>Музыка</a>\r\n                    </li>\r\n                    <li>\r\n                        <a>Настройки</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from \"react\";\r\nimport s from \"./dialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: any) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./message.module.css\";\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.dialogItem}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/dialogItem\";\r\nimport Message from \"./DialogItem/Message/message\";\r\nimport {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogsReducer\";\r\n\r\n\r\n// export type DialogsPropsType = {\r\n//     dialogs: Array<DialogType>\r\n//     messages: Array<MessageType>\r\n//     dispatch: (action: DialogsActionsTypes) => void\r\n//     newMessageBody: string\r\n//\r\n// }\r\n\r\nconst Dialogs = (props: any) => {\r\n// const Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElement = state.dialogs.map(\r\n        (d: any) => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElement = state.messages.map(\r\n        (m: any) => <Message message={m.message}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n    }\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n        // props.store.dispatch(updateNewMessageBodyAC(body));\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody}\r\n                                   onChange={onNewMessageChange}\r\n                                   placeholder={'Введите сообщение'}>\r\n                    </textarea></div>\r\n                    <div><button onClick={onSendMessageClick}>Отправить</button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// const DialogsContainer = (props: any) => {\r\n// // const Dialogs = (props: DialogsPropsType) => {\r\n//\r\n//     let state = props.store.getState().dialogsPage;\r\n//\r\n//     let onSendMessageClick = () => {\r\n//         props.store.dispatch(sendMessageAC())\r\n//     }\r\n//     let onNewMessageChange = (body: any) => {\r\n//         // let body = e.target.value;\r\n//         props.store.dispatch(updateNewMessageBodyAC(body));\r\n//     }\r\n//\r\n//     return (\r\n//        <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                 sendMessage={onSendMessageClick}\r\n//                 dialogsPage={state}/>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n\r\n        updateNewMessageBody: (body: any) => {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (Dialogs);\r\n\r\nexport default DialogsContainer;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport Women3 from \"../../assets/Images/Women3.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nlet Users = (props: any) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p ? styles.selectedPage : styles.Page}\r\n                              onClick={(e) => {\r\n                                  props.onPageChanged(p);\r\n                              }}>\r\n                            {p}</span>\r\n\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map((u: any) => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                            <img src={u.photos.small != null ? u.photos.small : Women3} alt=\"iso\"\r\n                                 className={styles.userPhoto}/>\r\n                                 </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingInProgress.some((id: any) => id === u.id)}\r\n                                          onClick={() => {props.unfollow(u.id);}}>Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some((id: any) => id === u.id)}\r\n                                          onClick={() => {props.follow(u.id);}}>follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React from \"react\";\r\nimport loading5 from \"../../../assets/Images/loading5.gif\";\r\nimport s from \"./preloader.module.css\"\r\n\r\nlet Preloader: any = () => {\r\n    return <div className={s.preloader}>\r\n        <img src={loading5} alt=\"iso\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, setCurrentPage,\r\n    unfollow, toggleFollowingProgress, getUsers\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./users\";\r\nimport Preloader from \"../common/Preloader/preloader\";\r\n\r\n\r\nclass UsersContainer extends React.Component<any, any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: any) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                // toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                followingInProgress={this.props.followingInProgress}/>\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {follow, unfollow, setCurrentPage,\r\n    toggleFollowingProgress, getUsers })(UsersContainer);\r\n","import React from \"react\";\r\nimport s from \"./profileInfo.module.css\";\r\nimport LogoF2 from \"../../../assets/Images/LogoF2.jpg\";\r\nimport Preloader from \"../../common/Preloader/preloader\";\r\nimport Women from \"../../../assets/Images/Women3.jpg\"\r\n\r\nconst ProfileInfo = (props: any) => {\r\n    if (!props.profile) {\r\n        // return <img className={s.NoPhoto} src={Women} alt='iso'/>\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img className={s.main} src={LogoF2} alt=\"iso\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt=\"No Photo\"/>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./post.module.css\";\r\nimport Women1 from \"./Women1.jpg\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <img src={Women1} alt=\"iso\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Likes:{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./myPosts.module.css\";\r\nimport Post from \"./Post/post\";\r\n\r\n\r\n// type MyPostsPropsType = {\r\n//     posts: Array<PostType>\r\n//     newPostText: string\r\n//     addPost: (postMessage: string) => void\r\n//     updateNewPostText: (newText: string) => void\r\n//     dispatch: (action: ProfileActionsTypes) => void\r\n// }\r\n\r\n\r\n\r\n// const MyPosts = (props: MyPostsPropsType) => {\r\nconst MyPosts = (props: any) => {\r\n\r\n    let postElement = props.posts.map(\r\n        (p: any) => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    const onPostChange = () => {\r\n        let newText: any = newPostElement.current?.value;\r\n        props.updateNewPostText(newText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        onChange={onPostChange} ref={newPostElement}\r\n                        value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add Post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostAC, changeNewTextAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./myPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        updateNewPostText: (newText: any) => {\r\n            let action = changeNewTextAC(newText);\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport s from \"./profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/profileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/myPostsContainer\";\r\n\r\n// export type ProfilePropsType = {\r\n    // posts: Array<PostType>\r\n    // newPostText: string\r\n    // addPost: (postMessage: string) => void\r\n    // updateNewPostText: (newText: string) => void\r\n    // dispatch: (action: ProfileActionsTypes) => void\r\n    // store: StoreType\r\n    // store: any\r\n// }\r\n\r\n// const Profile = (props: ProfilePropsType) => {\r\nconst Profile = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {setUserProfile} from \"../../redux/profileReducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n// export type ProfilePropsType = {\r\n// posts: Array<PostType>\r\n// newPostText: string\r\n// addPost: (postMessage: string) => void\r\n// updateNewPostText: (newText: string) => void\r\n// dispatch: (action: ProfileActionsTypes) => void\r\n// store: StoreType\r\n// store: any\r\n// }\r\n\r\n// const Profile = (props: ProfilePropsType) => {\r\nclass ProfileContainer extends React.Component<any, any> {\r\n\r\n    componentDidMount() {\r\n        let userId: any = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = 2;\r\n        }\r\n        axios.get('https://social-network.samuraijs.com/api/1.0/profile/'+ userId)\r\n            .then((response: any) => {\r\n                this.props.setUserProfile(response.data);\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile}/>\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state: any) => ({\r\n    profile: state.profilePage.profile\r\n});\r\n\r\nlet WithUrlDataContainerComponent = withRouter(ProfileContainer);\r\n\r\nexport default connect(mapStateToProps, {setUserProfile}) (WithUrlDataContainerComponent);","import LogoF1 from \"./Images/LogoF1.png\";\r\nimport React from \"react\";\r\nimport s from \"./header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header: any = (props: any) => {\r\n    return (\r\n        <header>\r\n            <div>\r\n                <img className={s.headerImg} src={LogoF1} alt=\"iso\"/>\r\n                <div className={s.loginBlock}>\r\n                    {props.isAuth ? props.login\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./header\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {setAuthUserData} from \"../../redux/authReducer\";\r\n\r\nclass HeaderContainer extends React.Component<any, any> {\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\r\n            withCredentials: true\r\n        })\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    let {id, email, login} = response.data.data;\r\n                    this.props.setAuthUserData(id, email, login);\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\nconst mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData})(HeaderContainer);","import React from 'react';\r\nimport './App.css';\r\nimport Footer from \"./Components/Footer/footer\";\r\nimport Nav from \"./Components/Navigation/nav\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./Components/Dialogs/dialogsContainer\";\r\nimport UsersContainer from \"./Components/Users/usersContainer\";\r\nimport ProfileContainer from \"./Components/Profile/profileContainer\";\r\nimport HeaderContainer from \"./Components/Header/headerContainer\";\r\n\r\n// type AppPropsType = {\r\n    // store: any\r\n    // dispatch: (action: any) => void\r\n// }\r\n\r\n// const App = (props: AppPropsType) => {\r\nconst App = () => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"lyubaProject\">\r\n                <HeaderContainer/>\r\n                <Nav/>\r\n                <div className=\"lyubaProjectContent\">\r\n\r\n                           <Route path='/profile/:userId?'\r\n                           render={() => <ProfileContainer/>}/>\r\n\r\n                    <Route path='/dialogs'\r\n                           render={() => <DialogsContainer/>}/>\r\n\r\n                    <Route path='/users'\r\n                           render={() => <UsersContainer/>}/>\r\n\r\n                </div>\r\n                <Footer/>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/reduxStore\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n            <App/>\r\n            </Provider>\r\n        </React.StrictMode>\r\n        </BrowserRouter>, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}