{"version":3,"sources":["Components/Navigation/nav.module.css","Components/Profile/ProfileInfo/profileInfo.module.css","Components/Dialogs/dialogs.module.css","Components/Profile/MyPosts/myPosts.module.css","Components/Dialogs/DialogItem/dialogItem.module.css","Components/Header/Images/LogoF1.png","Components/Header/header.module.css","Components/Profile/Images/LogoF2.jpg","Components/Profile/MyPosts/Post/post.module.css","Components/Profile/MyPosts/Post/Women1.jpg","Components/Dialogs/DialogItem/Message/message.module.css","serviceWorker.ts","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/reduxStore.ts","Components/Header/header.tsx","Components/Footer/footer.tsx","Components/Navigation/nav.tsx","Components/Profile/ProfileInfo/profileInfo.tsx","Components/Profile/MyPosts/Post/post.tsx","Components/Profile/MyPosts/myPosts.tsx","Components/Profile/MyPosts/myPostsContainer.tsx","Components/Profile/profile.tsx","Components/Dialogs/DialogItem/dialogItem.tsx","Components/Dialogs/DialogItem/Message/message.tsx","Components/Dialogs/dialogs.tsx","Components/Dialogs/dialogsContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","postMessage","push","newText","dialogs","name","messages","newMessageBody","dialogsReducer","body","sidebarReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","store","createStore","Header","className","s","headerImg","src","LogoF1","alt","Footer","footer","Nav","nav","item","to","activeClassName","active","ProfileInfo","profileInfo","main","LogoF2","descriptionBlock","Post","props","post","Women1","MyPosts","postElement","map","p","key","newPostElement","React","createRef","postsBlock","onChange","current","value","updateNewPostText","ref","onClick","addPost","MyPostsContainer","getState","changeNewTextAC","dispatch","Profile","profile","DialogItem","path","dialog","Message","dialogItem","Dialogs","dialogsElement","d","messagesElement","m","dialogsItems","e","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","updateNewMessageBodyAC","App","render","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b4270522.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__Et1Bj\",\"item\":\"nav_item__3xsM5\",\"active\":\"nav_active__3a-2j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"profileInfo_profileInfo__3r8on\",\"descriptionBlock\":\"profileInfo_descriptionBlock__24mrV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3GW9J\",\"dialogsItems\":\"dialogs_dialogsItems__3COTy\",\"active\":\"dialogs_active__1CNOb\",\"dialogItem\":\"dialogs_dialogItem__15yip\",\"messages\":\"dialogs_messages__1cNZ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__12CUv\",\"posts\":\"myPosts_posts__3wr60\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogItem_dialogs__61QXa\",\"active\":\"dialogItem_active__3C-MD\",\"dialog\":\"dialogItem_dialog__3bXEd\",\"messages\":\"dialogItem_messages__qgltT\"};","module.exports = __webpack_public_path__ + \"static/media/LogoF1.48d09aeb.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerImg\":\"header_headerImg__1fXoA\"};","module.exports = __webpack_public_path__ + \"static/media/LogoF2.2952645f.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__3BeDl\"};","module.exports = __webpack_public_path__ + \"static/media/Women1.c5901a19.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__3BpLt\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// import {PostType} from \"./state\";\r\n\r\nexport type ProfileActionsTypes = ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof changeNewTextAC>\r\n\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Привет', likesCount: 12},\r\n        {id: 2, message: 'Это мой первый пост!', likesCount: 21}\r\n    ],\r\n    newPostText: \"NewPostText\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: any = {\r\n                id: 3,\r\n                message: action.postMessage,\r\n                likesCount: 0\r\n            };\r\n            state.posts.push(newPost);\r\n            state.newPostText = \"\";\r\n            return state;\r\n        case UPDATE_NEW_POST_TEXT:\r\n            state.newPostText = action.newText;\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostAC = (postMessage: string) => {\r\n    return {\r\n        type: \"ADD-POST\",\r\n        postMessage: postMessage\r\n    } as const\r\n}\r\nexport const changeNewTextAC = (newText: string) => {\r\n    return {\r\n        type: \"UPDATE-NEW-POST-TEXT\",\r\n        newText: newText\r\n    } as const\r\n}\r\n\r\nexport default profileReducer;","import {StoreType} from \"./state\";\r\n\r\n\r\nexport type DialogsActionsTypes = ReturnType<typeof sendMessageAC>\r\n    | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Люба'},\r\n        {id: 2, name: 'Маша'},\r\n        {id: 3, name: 'Даша'}\r\n    ],\r\n\r\n    messages: [\r\n        {id: 1, message: 'Я Вас приветствую!'},\r\n        {id: 2, message: 'Привет!'},\r\n        {id: 3, message: 'Здорово!'}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsTypes) => {\r\nswitch (action.type) {\r\n    case UPDATE_NEW_MESSAGE_BODY:\r\n        state.newMessageBody = action.body;\r\n        return state;\r\n    case SEND_MESSAGE:\r\n        let body = state.newMessageBody;\r\n        state.newMessageBody = \"\";\r\n        state.messages.push({id: 6, message: body});\r\n        return state;\r\n    default:\r\n        return state\r\n    }\r\n}\r\nexport const sendMessageAC = () => {\r\n    return {\r\n        type: \"SEND-MESSAGE\"\r\n    } as const\r\n}\r\nexport const updateNewMessageBodyAC = (body: string) => {\r\n    return {\r\n        type: \"UPDATE-NEW-MESSAGE-BODY\",\r\n        body: body\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer\r\n})\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import LogoF1 from \"./Images/LogoF1.png\";\r\nimport React from \"react\";\r\nimport s from \"./header.module.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <div>\r\n                <img className={s.headerImg} src={LogoF1} alt=\"iso\"/>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport s from \"./footer.module.css\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p className={s.footer}>© Петров С.В.</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport s from \"./nav.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n            <div className={s.nav}>\r\n                <ul className={s.item}>\r\n                    <li>\r\n                        <NavLink to = {\"/profile\"} activeClassName={s.active}>Профиль</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to = {\"/dialogs\"} activeClassName={s.active}>Сообщения</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <a>Новости</a>\r\n                    </li>\r\n                    <li>\r\n                        <a>Музыка</a>\r\n                    </li>\r\n                    <li>\r\n                        <a>Настройки</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from \"react\";\r\nimport s from \"./profileInfo.module.css\";\r\nimport LogoF2 from \"../Images/LogoF2.jpg\";\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img className={s.main} src={LogoF2} alt=\"iso\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./post.module.css\";\r\nimport Women1 from \"./Women1.jpg\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <img src={Women1} alt=\"iso\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Likes:{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./myPosts.module.css\";\r\nimport Post from \"./Post/post\";\r\nimport {addPostAC, changeNewTextAC, ProfileActionsTypes} from \"../../../redux/profileReducer\";\r\nimport {PostType} from \"../../../redux/state\";\r\n\r\n\r\n// type MyPostsPropsType = {\r\n//     posts: Array<PostType>\r\n//     newPostText: string\r\n//     addPost: (postMessage: string) => void\r\n//     updateNewPostText: (newText: string) => void\r\n//     dispatch: (action: ProfileActionsTypes) => void\r\n// }\r\n\r\n\r\n\r\n// const MyPosts = (props: MyPostsPropsType) => {\r\nconst MyPosts = (props: any) => {\r\n\r\n    let postElement = props.posts.map(\r\n        (p: any) => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    const onPostChange = () => {\r\n        let newText: any = newPostElement.current?.value;\r\n        props.updateNewPostText(newText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        onChange={onPostChange} ref={newPostElement}\r\n                        value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add Post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostAC, changeNewTextAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./myPosts\";\r\n\r\n\r\n// type MyPostsContainerPropsType = {\r\n//     posts: Array<PostType>\r\n//     newPostText: string\r\n//     addPost: (postMessage: string) => void\r\n//     updateNewPostText: (newText: string) => void\r\n//     dispatch: (action: ProfileActionsTypes) => void\r\n// }\r\n\r\n\r\n\r\nconst MyPostsContainer = (props: any) => {\r\n\r\n    let state = props.store.getState();\r\n\r\n    const addPost = () => {\r\n        props.store.dispatch(addPostAC(state.profilePage.newPostText));\r\n    }\r\n\r\n    const onPostChange = (newText: any) => {\r\n        let action = changeNewTextAC(newText);\r\n        props.store.dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <MyPosts updateNewPostText={onPostChange}\r\n                 addPost={addPost}\r\n                 posts={state.profilePage.posts}\r\n        newPostText={state.profilePage.newPostText}/>\r\n    )\r\n}\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport s from \"./profile.module.css\";\r\nimport MyPosts from \"./MyPosts/myPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/profileInfo\";\r\nimport {PostType, StoreType} from \"../../redux/state\";\r\nimport {ProfileActionsTypes} from \"../../redux/profileReducer\";\r\nimport MyPostsContainer from \"./MyPosts/myPostsContainer\";\r\n// import store from \"../../redux/reduxStore\";\r\n\r\n// export type ProfilePropsType = {\r\n    // posts: Array<PostType>\r\n    // newPostText: string\r\n    // addPost: (postMessage: string) => void\r\n    // updateNewPostText: (newText: string) => void\r\n    // dispatch: (action: ProfileActionsTypes) => void\r\n    // store: StoreType\r\n    // store: any\r\n// }\r\n\r\n// const Profile = (props: ProfilePropsType) => {\r\nconst Profile = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer store={props.store}\r\n                              // posts={props.profilePage.posts}\r\n                              // updateNewPostText={props.updateNewPostText}\r\n                              // newPostText={props.newPostText}\r\n                              // addPost={props.addPost}\r\n                              // dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport s from \"./dialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: any) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./message.module.css\";\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.dialogItem}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/dialogItem\";\r\nimport Message from \"./DialogItem/Message/message\";\r\nimport {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogsReducer\";\r\n\r\n\r\n// export type DialogsPropsType = {\r\n//     dialogs: Array<DialogType>\r\n//     messages: Array<MessageType>\r\n//     dispatch: (action: DialogsActionsTypes) => void\r\n//     newMessageBody: string\r\n//\r\n// }\r\n\r\nconst Dialogs = (props: any) => {\r\n// const Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElement = state.dialogs.map(\r\n        (d: any) => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElement = state.messages.map(\r\n        (m: any) => <Message message={m.message}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n    }\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n        // props.store.dispatch(updateNewMessageBodyAC(body));\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody}\r\n                                   onChange={onNewMessageChange}\r\n                                   placeholder={'Введите сообщение'}>\r\n                    </textarea></div>\r\n                    <div><button onClick={onSendMessageClick}>Отправить</button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/dialogItem\";\r\nimport Message from \"./DialogItem/Message/message\";\r\nimport {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./dialogs\";\r\n\r\n\r\nconst DialogsContainer = (props: any) => {\r\n// const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.store.getState().dialogsPage;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.store.dispatch(sendMessageAC())\r\n    }\r\n    let onNewMessageChange = (body: any) => {\r\n        // let body = e.target.value;\r\n        props.store.dispatch(updateNewMessageBodyAC(body));\r\n    }\r\n\r\n    return (\r\n       <Dialogs updateNewMessageBody={onNewMessageChange}\r\n                sendMessage={onSendMessageClick}\r\n                dialogsPage={state}/>\r\n    )\r\n}\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./Components/Header/header\";\r\nimport Footer from \"./Components/Footer/footer\";\r\nimport Nav from \"./Components/Navigation/nav\";\r\nimport Profile from \"./Components/Profile/profile\";\r\nimport Dialogs from \"./Components/Dialogs/dialogs\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport store from \"./redux/reduxStore\";\r\nimport DialogsContainer from \"./Components/Dialogs/dialogsContainer\";\r\n\r\n// type AppPropsType = {\r\n    // store: any\r\n    // dispatch: (action: any) => void\r\n// }\r\n\r\n// const App = (props: AppPropsType) => {\r\nconst App = (props: any) => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"lyubaProject\">\r\n                <Header/>\r\n                <Nav/>\r\n                <div className=\"lyubaProjectContent\">\r\n                    <Route path={'/profile'} render={() => <Profile store={props.store}/>}/>\r\n                    <Route path={'/dialogs'} render={() => <DialogsContainer store={props.store}\r\n                        // dialogs={props.store.getState().dialogsPage.dialogs}\r\n                        // messages={props.store.getState().dialogsPage.messages}\r\n                        // newMessageBody={props.store.getState().dialogsPage.newMessageBody}\r\n                        // dispatch={props.store.dispatch.bind(props.store)}\r\n                        // dispatch={props.store.dispatch}\r\n                    />}/>\r\n                </div>\r\n                <Footer/>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/reduxStore\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nexport let rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App store={store}\r\n                 // dispatch={store.dispatch.bind(store)}\r\n             />\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree();\r\n// store.subscribe(rerenderEntireTree);\r\nstore.subscribe(() => {\r\n    rerenderEntireTree()\r\n});\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}